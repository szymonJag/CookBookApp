@page "/register"
@inject IUserService UserService
@inject NavigationManager NavigationManager
<div class="col-md-6 offset-md-3 mt-5">
    <div class="alert alert-info">
        Rejestracja
    </div>
    <div class="card">
        <h4 class="card-header">Logowanie</h4>
        <div class="card-body">
            <EditForm Model="@user" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Nazwa użytkownika</label>
                    <InputText @bind-Value="user.Username" class="form-control" />
                    <ValidationMessage For="@(() => user.Username)" />
                </div>
                <div class="form-group">
                    <label>Hasło</label>
                    <InputText @bind-Value="user.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <button class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>}
                    Zaloguj
                </button>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="alert alert-danger mt-3 mb-0">@error</div>}
            </EditForm>
        </div>
    </div>
</div>

@code {
    private RegisterUser user = new RegisterUser();
    private bool loading;
    private string error;

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await UserService.Register(user);
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

}
